---
title: PassFort Integration API Reference

language_tabs:
  - python: Python
  - javascript: NodeJS

toc_footers:
  - '&copy; 2020 PassFort'
  - '<a href="https://developer.passfort.com">PassFort Developer Hub</a>'
  - '<a href="https://help.passfort.com/category/k84bc464f5-developer-documentation">PassFort Help Articles for Developers</a>'

includes:
  - metadata
  - config
  - passfort-data-structure
  - demo-checks
  - using-integration.html.md.erb
  - one-time-sync-ekyc.html.md.erb
  - one-time-sync-company-data.html.md.erb
  - one-time-callback-docver.html.md.erb
  - one-time-callback-docfetch.html.md.erb
  - one-time-sync-company-custom-check.html.md.erb
  - one-time-sync-individual-custom-check.html.md.erb
  - additional-features
  - requests-to-passfort.html.md.erb

search: true
---
# Introduction

The PassFort Integration API allows you to easily connect new data sources
(integrations) to PassFort by creating a JSON web service which conforms to
the specifications outlined in this document.

## Using this documentation

As the majority of the Integration API is not called but served by integrations,
the endpoints documented here, unless otherwise indicated, are ones that your
integration should implement.

Code samples are given in the dark area to the right, and will generally take
the form of abbreviated route handlers for the functionality being described.
For the Python examples, [Flask 1.0][flask-docs]
will be used as the implementation example, and [Express 4][express-docs] will
be used for the NodeJS examples.

As described in the [Metadata section](#metadata), the Integration API is
versioned to allow the implementation of integrations to be altered in the
future; all information in this document corresponds to Version 1 of the
Integration API Protocol. Versions of the Integration API will not be
discontinued for as long as existing integrations use them.

# Technical Requirements

Your integration _must_ be served over HTTPS; integrations are not permitted to
be served over unencrypted HTTP connections. Additionally, the connection must
be using TLS 1.2 or above. This requirement is enforced to ensure that
sensitive information is not transmitted unprotected over the public internet.

Your integration may use plain HTTP for basic testing, but validation will fail
if your integration does not use HTTPS.

# Authentication

In order to protect the integrity and confidentiality of personal information
and to ensure your integration is only utilised by PassFort, all requests are
authenticated using the
[HTTP signatures draft standard, version 12][http-signatures-draft-12].
Several usable implementations of the standard can be found on this
[tracker of HTTP Signatures implementations][signatures-impl-thread] maintained
by the spec authors.

When implementing an integration, you must generate a 32 byte key secret key to sign
and verify all requests and responses your integration handles, unless
specifically noted in this document; the key ID to use should be the first 8
characters of the Base64 encoding of this key. The only supported algorithm is
`hmac-sha256`, and the only supported Digest is `SHA-256`.

You must sign and verify at least the `(request-target)` (the verb and full path of
the initial request) and `Date` headers. Requests with a body (eg. `POST` requests)
must also include and sign a `Digest` header. The `Date` header must be set to the
current date. Requests with any of...

- A missing or incorrect request signature.
- A `Digest` header which is missing or does not match the request body.
- A `Date` header which is missing or more than 30 seconds from the current time.

... will be rejected.

<aside class="warning">
 You <strong>must</strong> verify signatures in incoming requests - signing
 your outgoing requests alone is not adequate. The validation suite will fail
 integrations that do not correctly verify the signature of incoming requests.
</aside>

[flask-docs]: https://flask.palletsprojects.com/en/1.0.x/
[express-docs]: https://expressjs.com/en/4x/api.html
[http-signatures-draft-12]:
  https://tools.ietf.org/html/draft-cavage-http-signatures-12
[signatures-impl-thread]: https://github.com/w3c-dvcg/http-signatures/issues/1
