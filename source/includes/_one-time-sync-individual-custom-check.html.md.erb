# One-time Sync Individual Custom 

This section lists all endpoints that must be implemented for a one-time synchronous Individual custom check integration.

One-time synchronous Individual custom checks are custom checks with the following behavior:

    * The check result is returned directly upon request; the response is only sent when the check is finished (synchronous).
    
    * This one-time check operates at a point in time, meaning the check result is returned once and there is no ongoing monitoring.


## Get check configuration for one-time sync Individual custom

<%= partial("includes/partials/config.md.erb", :locals => { :name => "sync_individual_custom" }) %>

This endpoint specifies which configuration is used by Passfort to perform a
one-time synchronous custom check using your integration.

### HTTP request

`GET https://my-integration.example.com/config`

### Response fields

Most configuration fields are already discussed in the [configuration
section](#configuration). The following options are specific to the Individual custom check.

#### Check type

The `check_type` field must be set to `"INDIVIDUAL_CUSTOM"`.

#### Check template

The `check_template` fields for this check are:

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Required?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>type</code></td>
      <td>The value <code>"ONE_TIME_SYNCHRONOUS"</code></td>
      <td>Yes</td>
      <td>
        Which check template to use for this check. For one-time synchronous
        checks, you must specify <code>"ONE_TIME_SYNCHRONOUS"</code>.
      </td>
    </tr>
    <tr>
      <td><code>timeout</code></td>
      <td>number</td>
      <td>No</td>
      <td>
        The minimum number of seconds Passfort waits without a response before
        considering identity checks run through this integration to have
        timed out. Must be an integer. If not specified or set to
        <code>null</code>, a timeout of 60 seconds is used.
      </td>
    </tr>
  </tbody>
</table>

<%= partial("includes/partials/authenticated.md.erb", :locals => {
  :role => :server,
}) %>

## Run a one-time sync Individual custom check

This endpoint exposes your data provider's check results to Passfort.

### HTTP request

`POST https://my-integration.example.com/checks`

>A JSON payload following this structure is sent to the endpoint:

```json
<%= pretty_json("requests/run_check_sync_individual_custom", "json") %>
```

The payload of the request can contain the following fields:

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Always present?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>id</code></td>
      <td>UUID</td>
      <td>Yes</td>
      <td>
        Every check instruction contains a unique ID which can be used to
        track and identify individual requests without needing to use other
        information in the request.
      </td>
    </tr>
    <tr>
      <td><code>demo_result</code></td>
      <td>
        One of the <a href="#demo-result-types">specified demo result types</a>
      </td>
      <td>No</td>
      <td>
        If this field is present, the check must be considered a demo check
        and you should respond with appropriate demo data. See the
        <a href="#demo-checks">Demo Checks</a> section for more information.
      </td>
    </tr>
    <tr>
      <td><code>commercial_relationship</code></td>
      <td><code>"DIRECT"</code></td>
      <td>Yes</td>
      <td>
        Specifies whether the check is for a customer with a direct
        relationship with your integration's data provider or if they're
        using the check through Passfort's pay-as-you-go reselling scheme. 
        Reselling is not available for Individual Custom Check.
      </td>
    </tr>
    <tr>
      <td><code>check_input</code></td>
      <td>A <code>IndividualData</code> object</td>
      <td>Yes</td>
      <td>  
      This field contains the profile information for the individual on which the
        Individual custom check is run. See the
        <a href="#check-input">Passfort Data Structure check input</a> section
        for more information on how profile data is structured within Passfort.
      </td>
    </tr>
    <tr>
      <td><code>provider_config</code></td>
      <td>A user-defined JSON object</td>
      <td>Yes</td>
      <td>
        This field contains the provider config structured in the way
        specified by your integration's
        <a href="#get-check-configuration-one-time-sync-individual-custom">
          configuration endpoint
        </a>, with the <code>name</code> field corresponding to the key, and
        the value being the <code>value</code> of the configuration option.
      </td>
    </tr>
    <tr>
      <td><code>provider_credentials</code></td>
      <td>A user-defined JSON object</td>
      <td>No</td>
      <td>
        This field contains the credentials structured in the way
        specified by your integration's
        <a href="#get-check-configuration-one-time-sync-individual-custom">
          configuration endpoint
        </a>, with the <code>name</code> field corresponding to the key, and
        the value being the <code>value</code> of the configuration option. <strong>This
        field is only sent if <code>commercial_relationship</code> is set to
        <code>"DIRECT"</code>.</strong>
      </td>
    </tr>
  </tbody>
</table>

```python 
from flask import Flask, jsonify, request
from integration.testing import create_demo_result
from integration.provider import make_provider_request, reseller_creds, \
    extract_passfort_metadata
from integration.errors import ProviderError, ConnectionError

app = Flask(__name__)

@app.post('/checks')
def run_check():
    body = request.json

    demo_result = body.get('demo_result')
    check_input = body.get('check_input')

    # Handle demo data scenarios
    if demo_result is not None:
        return jsonify(create_demo_result(demo_result, check_input))

    config = body.get('provider_config')

    credentials = body.get('provider_credentials')

    # Make call to provider
    try:
        result = make_provider_request(credentials, config, check_input)


        return jsonify({
            "result": map_to_passfort_result(result),
            'errors': [],
            'warnings': [],
            'provider_data': dict(result),
            "external_resources": [
                {
                    "type": "EMBED",
                    "url": result.further_details.url,
                    "id": result.id,
                    "label": "Further details"
                }
            ],
        })
    except ConnectionError as e:
        return jsonify({
            
            'errors': [{
                'type': 'PROVIDER_CONNECTION',
                'message': f'Failed to contact data provider: {str(e)}'
            }],
            'warnings': []
        })
    except ProviderError as e:
        return jsonify({
            'errors': [{
                'type': 'PROVIDER_MESSAGE',
                'message': f'Provider error: {str(e)}'
            }],
            'warnings': []
        })
```

```javascript
const express = require("express");
const app = express();

const { createDemoResult } = require("./testing");
const {
  makeProviderRequest,
  extractPassFortMetadata,
} = require("./provider");

app.use(express.json());

app.post("/checks", (req, res) => {
  // Handle demo data scenarios
  if (req.body.demo_result !== undefined) {
    return res.json(
      createDemoResult(req.body.demo_result, req.body.check_input)
    );
  }

  const credentials = res.body.provider_credentials

  return makeProviderRequest(
    credentials,
    req.body.provider_config,
    req.body.check_input
  )
    .then((checkResult) => {
        result = make_provider_request(credentials, config, check_input)


        return jsonify({
            "result": map_to_passfort_result(result),
            'errors': [],
            'warnings': [],
            'provider_data': result,
            "external_resources": [
                {
                    "type": "EMBED",
                    "url": result.further_details.url,
                    "id": result.id,
                    "label": "Further details"
                }
            ],
        });
    })
    .catch((err) => {
      if (err.type === "CONNECTION") {
        return res.json({
          errors: [
            {
              type: "PROVIDER_CONNECTION",
              error: "Failed to contact data provider: " + e.message,
            },
          ],
          warnings: [],
        });
      } else {
        return res.json({
          errors: [
            {
              type: "PROVIDER_MESSAGE",
              error: "Provider error: " + e.message,
            },
          ],
          warnings: [],
        });
      }
    });
});
```


#### `check_input`

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Required?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>entity_type</code></td>
      <td>The value <code>"INDIVIDUAL"</code></td>
      <td>Yes</td>
      <td>
        The only supported entity type for Individual Custom Checks
        is individual.
      </td>
    </tr>
    <tr>
    <tr>
      <td><code>personal_details</code></td>
      <td>Object</td>
      <td>No</td>
      <td>
        A data object containing Personal information about an individual. Refer to <a href="https://developer.passfort.com/api#tag/Profiles/paths/~1profiles~1%7Bprofile_id%7D~1collected_data/post">Passfort API Documentation</a> for additional details.
      </td>
    </tr>
    <tr>
    <tr>
      <td><code>contact_details</code></td>
      <td>Object</td>
      <td>No</td>
      <td>
        The phone number and email for the individual the check is run against. 
      </td>
    </tr>
    <tr>
      <td><code>documents_metadata</code></td>
      <td>Object</td>
      <td>No</td>
      <td>Any additional identity numbers that individual has. Note that the individual's national identity number(s) is stored in <code>personal_details.national_identity_number</code>
      </td>
    </tr>
    <tr>
      <td><code>customer_refs</code></td>
      <td>String</td>
      <td>Yes</td>
      <td>
        A label used by Passfort customers to identify the profile the check is being run against. 
      </td>
    </tr>
    <tr>
      <td><code>address_history</code></td>
      <td>Object</td>
      <td>No</td>
      <td>
        A list of addresses in which the individual has lived. Each of these can have an approximate start and end date. Refer to <a href="https://developer.passfort.com/api#tag/Profiles/paths/~1profiles~1%7Bprofile_id%7D~1collected_data/post">Passfort API Documentation</a> for additional details.
      </td>
    </tr>
  </tbody>
</table>



### Response fields

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Required?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>errors</code></td>
      <td>
        An array containing one or more
        <a href="#check-errors">Errors</a>
      </td>
      <td>No</td>
      <td>
        A list of errors that occurred while running this check. If this is
        provided and it's not empty, the result of this check is
        considered to be errored by Passfort, regardless of the other contents
        of this response.
      </td>
    </tr>
    <tr>
      <td><code>warnings</code></td>
      <td>
        An array containing one or more warnings
      </td>
      <td>No</td>
      <td>
        Essentially the same as <a href="#check-errors">errors</a>, except the
        <code>sub_type</code> and <code>data</code> fields aren't present, and
        providing warnings won't cause Passfort to consider the check
        as errored.
      </td>
    </tr>
    <tr>
      <td><code>provider_data</code></td>
      <td>
        Any valid JSON value
      </td>
      <td>No</td>
      <td>
        This should be the structured JSON data returned by the data provider
        or a conversion of the data provider's response to allow
        Passfort to investigate any issues that arise with your integration.
      </td>
    </tr>
  </tbody>
</table>

>This endpoint should return JSON in the following format:

```json
<%= pretty_json("responses/run_check_sync_individual_custom", "json") %>
```
#### `check_output`

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Required?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>decision</code></td>
      <td><code>DecisionClass</code></td>
      <td>Yes</td>
      <td>
        The check will return one of the following decisions: "PASS | FAIL | PARTIAL | WARN | ERROR"
      </td>
    </tr>
    <tr>
      <td><code>summary</code></td>
      <td>
      A summary of the result
        in <a href="#data-structure">the Passfort Partner API</a>.
      </td>
      <td>If a match was found by the provider</td>
      <td>As best as possible, all fields you support should be made to populate all fields supported by the provider</td>
    </tr>
    <tr>
        <tr>
      <td><code>external_resources</code></td>
      <td>
        An object 
        in <a href="#data-structure">the Passfort Partner API</a>.
      </td>
      <td>No</td>
      <td>As best as possible, all fields you support should be made to populate all fields supported by the provider</td>
    </tr>
    <tr>
      <td><code>warnings</code></td>
      <td>
        An object containing the registry data, structured as it is
        in <a href="#data-structure">the Passfort Partner API</a>.
      </td>
      <td>If a match is found by the provider</td>
      <td>As best as possible, all fields you support should be made to populate all fields supported by the provider</td>
    </tr>
    <tr>
      <td><code>errors</code></td>
      <td>
        An array containing one or more
        <a href="#check-errors">Errors</a>
      </td>
      <td>No</td>
      <td>
      A list of errors that occurred while running this check. If this is
      provided and it is not empty, the result of this check is
      considered to be errored by Passfort, regardless of the other contents
      of this response.
      </td>
    </tr>
  </tbody>
</table>



