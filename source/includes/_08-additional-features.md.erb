# Additional Features

## Company Search

In order to run a successful company data check a company must be uniquely 
identified. Some company data providers allow searching through the candidates 
in their dataset in order to identify the company to be checked.

This endpoint exposes your data provider's company search functionality to 
PassFort.

### HTTP Request

`POST https://my-integration.example.com/search`

> A JSON payload following this structure will be sent to the endpoint:

```json
<%= pretty_json("requests/run_sync_company_search", "json") %>
```

The payload of the request can contain the following fields

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Always Present?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>demo_result</code></td>
      <td>
        One of the <a href="#demo-result-types">specified demo result types</a>
      </td>
      <td>No</td>
      <td>
        If this field is present, the search must be considered a demo search
        and you should respond with appropriate demo data. See the
        <a href="#demo-checks">Demo Checks section</a> for more information.
      </td>
    </tr>
    <tr>
      <td><code>commercial_relationship</code></td>
      <td>One of <code>"DIRECT"</code>, <code>"PASSFORT"</code></td>
      <td>Yes</td>
      <td>
        Specified whether the search is for a customer with a direct
        relationship with your integration's data provider, or if they are
        using the search feature through PassFort's pay-as-you-go reselling scheme.
      </td>
    </tr>
    <tr>
      <td><code>search_input</code></td>
      <td>A SearchInput object</td>
      <td>Yes</td>
      <td>
        This field contains the known profile information on the company the
        company check should be run for. 
      </td>
    </tr>
    <tr>
      <td><code>provider_config</code></td>
      <td>A user-defined JSON object</td>
      <td>Yes</td>
      <td>
        This field contains the provider config structured in the way
        specified by your integration's
        <a href="#get-check-configuration-one-time-sync-company-data">
          configuration endpoint
        </a>, with the <code>name</code> field corresponding to the key, and
        the value being the value of the configuration option.
      </td>
    </tr>
    <tr>
      <td><code>provider_credentials</code></td>
      <td>A user-defined JSON object</td>
      <td>No</td>
      <td>
        This field contains the credentials structured in the way
        specified by your integration's
        <a href="#get-check-configuration-one-time-sync-company-data">
          configuration endpoint
        </a>, with the <code>name</code> field corresponding to the key, and
        the value being the value of the configuration option. <strong>This
        field is only sent if <code>commercial_relationship</code> is set to
        <code>"DIRECT"</code>.</strong>
      </td>
    </tr>
  </tbody>
</table>


```python 
from flask import Flask, jsonify, request
from integration.testing import create_demo_result
from integration.provider import make_provider_request, reseller_creds, \
    convert_to_passfort_candidate
from integration.errors import ProviderError, ConnectionError

app = Flask(__name__)

@app.post('/search')
def run_search():
    body = request.json

    demo_result = body.get('demo_result')
    search_input = body.get('search_input')

    # Handle demo data scenarios
    if demo_result is not None:
        return jsonify(create_demo_result(demo_result, search_input))

    commercial_rel = body.get('commercial_relationship')
    credentials = reseller_creds
    config = body.get('provider_config')

    # Use provided creds if search is through direct agreement
    if commercial_rel == 'DIRECT':
      credentials = body.get('provider_credentials')

    # Make call to provider
    try:
        result = make_provider_request(credentials, config, search_input)

        return jsonify({
            'search_output': sorted(
                [
                  convert_to_passfort_candidate(hit) 
                  for hit 
                  in result.hits
                ],
                key=lambda hit: hit.score
            ),
            'errors': [],
            'warnings': [],
            'provider_data': dict(result)
        })
    except ConnectionError as e:
        return jsonify({
            'errors': [{
                'type': 'PROVIDER_CONNECTION',
                'message': f'Failed to contact data provider: {str(e)}'
            }],
            'warnings': []
        })
    except ProviderError as e:
        return jsonify({
            'errors': [{
                'type': 'PROVIDER_MESSAGE',
                'message': f'Provider error: {str(e)}'
            }],
            'warnings': []
        })
```

```javascript
const express = require("express");
const app = express();

const { createDemoResult } = require("./testing");
const {
  makeProviderRequest,
  RESELLER_CREDS,
  convertToPassFortCandidate,
} = require("./provider");

app.use(express.json());

app.post("/search", (req, res) => {
  // Handle demo data scenarios
  if (req.body.demo_result !== undefined) {
    return res.json(
      createDemoResult(req.body.demo_result, req.body.search_input)
    );
  }

  // Use provided creds if check is through direct agreement
  const credentials =
    req.body.commercial_relationship === "DIRECT"
      ? res.body.provider_credentials
      : RESELLER_CREDS;

  return makeProviderRequest(
    credentials,
    req.body.provider_config,
    req.body.search_input
  )
    .then((searchResult) => {
      return res.json({
        search_output: searchResult.hits
          .map(hit => convertToPassFortCandidate(hit))
          .sort((a, b) => (a.score > b.score) ? 1 : -1),
        errors: [],
        warnings: [],
        provider_data: checkResult.data(),
      });
    })
    .catch((err) => {
      if (err.type === "CONNECTION") {
        return res.json({
          errors: [
            {
              type: "PROVIDER_CONNECTION",
              error: "Failed to contact data provider: " + e.message,
            },
          ],
          warnings: [],
        });
      } else {
        return res.json({
          errors: [
            {
              type: "PROVIDER_MESSAGE",
              error: "Provider error: " + e.message,
            },
          ],
          warnings: [],
        });
      }
    });
});
```

>This endpoint should return JSON in the following format:

```json
<%=pretty_json("responses/run_sync_company_search", "json") %>
```


### Response fields

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Required?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>search_output</code></td>
      <td>A list of objects structured per <code>Candidate</code> below</td>
      <td>If search did not error</td>
      <td>
        Indicates the list of candidates for this search. If supported by the provider,
        they should be sorted by match likliness with the best match first.
      </td>
    </tr>
    <tr>
      <td><code>errors</code></td>
      <td>
        An array containing one or more
        <a href="#check-errors">Errors</a>
      </td>
      <td>No</td>
      <td>
        A list of errors that occurred while running this search. If this is
        provided and it's not empty, the result of this search will be
        considered to be errored by PassFort, regardless of the other contents
        of this response.
      </td>
    </tr>
    <tr>
      <td><code>warnings</code></td>
      <td>
        An array containing one or more warnings
      </td>
      <td>No</td>
      <td>
        Essentially the same as <code>errors</code>, except the
        <code>sub_type</code> and <code>data</code> fields are not present, and
        providing warnings will not cause PassFort to consider the search
        as errored.
      </td>
    </tr>
    <tr>
      <td><code>provider_data</code></td>
      <td>
        Any valid JSON value
      </td>
      <td>No</td>
      <td>
        This should be the structured JSON data returned by the data provider,
        or a conversion of the data provider's response, to allow
        PassFort to investigate issues that may arise with your integration.
      </td>
    </tr>
    <tr>
      <td><code>charges</code></td>
      <td>
        An array containing one or more
        <a href="#check-charges">Charges</a>
      </td>
      <td>No</td>
      <td>
        A list of charges incurred while running this search. Charges may only
        be returned if both of these conditions are met:
        <ul>
          <li>No errors occurred (i.e. a result was generated).</li>
          <li>
            The search is being resold (the commercial relationship is
            with PassFort).
          </li>
        </ul>
        
        For demo searches, charges may be returned, but they will not be deducted
        from the institution's credit.
        
        If charges are returned, the total amount charged must be no greater
        than the maximum cost-per-check specified in the integration's
        configuration.
      </td>
    </tr>
  </tbody>
</table>


#### `Candidate`

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Required?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>name</code></td>
      <td>string</td>
      <td>Yes</td>
      <td>The registered name of the company.</td>
    <tr>
    <tr>
      <td><code>number</code></td>
      <td>string</td>
      <td>Yes</td>
      <td>The company's number.</td>
    <tr>
    <tr>
      <td><code>country_of_incorporation</code></td>
      <td>string</td>
      <td>Yes</td>
      <td>
        The <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3">ISO3 country code</a>
        for the country where the company is incorporated.
      </td>
    <tr>
    <tr>
      <td><code>status</code></td>
      <td>string</td>
      <td>No</td>
      <td>
        A string describing the current functioning of the company (e.g. "Active" or "Dissolved")
      </td>
    <tr>
    <tr>
      <td><code>provider_reference</code></td>
      <td>
        A ProviderRef object
      </td>
      <td>No</td>
      <td>
        An object uniquely identifying this candidate from this provider,
        structured as it is in <a href="#data-structure">the PassFort API</a>
      </td>
    <tr>
  </tbody>
</table>


