# Supported Features

## Company Search 

The identifier for this feature is `COMPANY_SEARCH`.

In order to run a successful company data check, a company must be uniquely 
identified. Some company data providers allow searching through the candidates 
in their dataset in order to identify the company to be checked.

This endpoint exposes your data provider&apos;s company search functionality to 
Passfort.

### HTTP Request

`POST https://my-integration.example.com/search`

> A JSON payload following this structure will be sent to the endpoint:

```json
<%= pretty_json("requests/run_sync_company_search", "json") %>
```

The payload of the request can contain the following fields

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Always Present?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>demo_result</code></td>
      <td>
        One of the <a href="#demo-result-types">specified demo result types</a>
      </td>
      <td>No</td>
      <td>
        If this field is present, the search must be considered a demo search
        and you should respond with appropriate demo data. See the
        <a href="#demo-checks">Demo Checks section</a> for more information.
      </td>
    </tr>
    <tr>
      <td><code>commercial_relationship</code></td>
      <td>One of <code>"DIRECT"</code>, <code>"PASSFORT"</code></td>
      <td>Yes</td>
      <td>
        Specified whether the search is for a customer with a direct
        relationship with your integration&apos;s data provider, or if they're
        using the search feature through PassFort&apos;s pay-as-you-go reselling scheme.
      </td>
    </tr>
    <tr>
      <td><code>search_input</code></td>
      <td>A SearchInput object</td>
      <td>Yes</td>
      <td>
        This field contains the known profile information on the company being
        searched for. 
      </td>
    </tr>
    <tr>
      <td><code>provider_config</code></td>
      <td>A user-defined JSON object</td>
      <td>Yes</td>
      <td>
        This field contains the provider configuration structured in the way
        specified by your integration&apos;s
        <a href="#get-check-configuration-one-time-sync-company-data">
          configuration endpoint
        </a>, with the <code>name</code> field corresponding to the key, and
        the value being the value of the configuration option.
      </td>
    </tr>
    <tr>
      <td><code>provider_credentials</code></td>
      <td>A user-defined JSON object</td>
      <td>No</td>
      <td>
        This field contains the credentials structured in the way
        specified by your integration&apos;s
        <a href="#get-check-configuration-one-time-sync-company-data">
          configuration endpoint
        </a>, with the <code>name</code> field corresponding to the key, and
        the value being the value of the configuration option. <strong>This
        field is only sent if <code>commercial_relationship</code> is set to
        <code>"DIRECT"</code>.</strong>
      </td>
    </tr>
  </tbody>
</table>


```python 
from flask import Flask, jsonify, request
from integration.testing import create_demo_result
from integration.provider import make_provider_request, reseller_creds, \
    convert_to_passfort_candidate
from integration.errors import ProviderError, ConnectionError

app = Flask(__name__)

@app.post('/search')
def run_search():
    body = request.json

    demo_result = body.get('demo_result')
    search_input = body.get('search_input')

    # Handle demo data scenarios
    if demo_result is not None:
        return jsonify(create_demo_result(demo_result, search_input))

    commercial_rel = body.get('commercial_relationship')
    credentials = reseller_creds
    config = body.get('provider_config')

    # Use provided creds if search is through direct agreement
    if commercial_rel == 'DIRECT':
      credentials = body.get('provider_credentials')

    # Make call to provider
    try:
        result = make_provider_request(credentials, config, search_input)

        return jsonify({
            'search_output': sorted(
                [
                  convert_to_passfort_candidate(hit) 
                  for hit 
                  in result.hits
                ],
                key=lambda hit: hit.score
            ),
            'errors': [],
            'warnings': [],
            'provider_data': dict(result)
        })
    except ConnectionError as e:
        return jsonify({
            'errors': [{
                'type': 'PROVIDER_CONNECTION',
                'message': f'Failed to contact data provider: {str(e)}'
            }],
            'warnings': []
        })
    except ProviderError as e:
        return jsonify({
            'errors': [{
                'type': 'PROVIDER_MESSAGE',
                'message': f'Provider error: {str(e)}'
            }],
            'warnings': []
        })
```

```javascript
const express = require("express");
const app = express();

const { createDemoResult } = require("./testing");
const {
  makeProviderRequest,
  RESELLER_CREDS,
  convertToPassFortCandidate,
} = require("./provider");

app.use(express.json());

app.post("/search", (req, res) => {
  // Handle demo data scenarios
  if (req.body.demo_result !== undefined) {
    return res.json(
      createDemoResult(req.body.demo_result, req.body.search_input)
    );
  }

  // Use provided creds if check is through direct agreement
  const credentials =
    req.body.commercial_relationship === "DIRECT"
      ? res.body.provider_credentials
      : RESELLER_CREDS;

  return makeProviderRequest(
    credentials,
    req.body.provider_config,
    req.body.search_input
  )
    .then((searchResult) => {
      return res.json({
        search_output: searchResult.hits
          .map(hit => convertToPassFortCandidate(hit))
          .sort((a, b) => (a.score > b.score) ? 1 : -1),
        errors: [],
        warnings: [],
        provider_data: checkResult.data(),
      });
    })
    .catch((err) => {
      if (err.type === "CONNECTION") {
        return res.json({
          errors: [
            {
              type: "PROVIDER_CONNECTION",
              error: "Failed to contact data provider: " + e.message,
            },
          ],
          warnings: [],
        });
      } else {
        return res.json({
          errors: [
            {
              type: "PROVIDER_MESSAGE",
              error: "Provider error: " + e.message,
            },
          ],
          warnings: [],
        });
      }
    });
});
```

>This endpoint should return JSON in the following format:

```json
<%=pretty_json("responses/run_sync_company_search", "json") %>
```


### Response fields

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Required?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>search_output</code></td>
      <td>A list of objects structured per <code>Candidate</code> below</td>
      <td>If search did not error</td>
      <td>
        Indicates the list of candidates for this search. If supported by the provider,
        they should be sorted by match likelihood with the best match first.
      </td>
    </tr>
    <tr>
      <td><code>errors</code></td>
      <td>
        An array containing one or more
        <a href="#check-errors">Errors</a>
      </td>
      <td>No</td>
      <td>
        A list of errors that occurred while running this search. If
        this is provided and is not empty, Passfort considers the
        result of this search to be errored, regardless of the other
        contents of this response.
      </td>
    </tr>
    <tr>
      <td><code>warnings</code></td>
      <td>
        An array containing one or more warnings
      </td>
      <td>No</td>
      <td>
        Essentially the same as <code>errors</code>, except the
        <code>sub_type</code> and <code>data</code> fields aren't present, and
        providing warnings won't cause Passfort to consider the search
        as errored.
      </td>
    </tr>
    <tr>
      <td><code>provider_data</code></td>
      <td>
        Any valid JSON value
      </td>
      <td>No</td>
      <td>
        This should be the structured JSON data returned by the data provider
        or a conversion of the data provider&apos;s response to allow
        Passfort to investigate any issues that arise with your integration.
      </td>
    </tr>
    <tr>
      <td><code>charges</code></td>
      <td>
        An array containing one or more
        <a href="#check-charges">Charges</a>
      </td>
      <td>No</td>
      <td>
        A list of charges incurred while running this search. Charges may only
        be returned if both of these conditions are met:
        <ul>
          <li>No errors occur when the check is run.</li>
          <li>
            The check is resold by Passfort.
          </li>
        </ul>
        
        For demo searches, charges may be returned but they won't be deducted
        from the institution&apos;s credit.
        
        If charges are returned, the total amount charged must be no greater
        than the maximum cost-per-check specified in the integration&apos;s
        configuration.
      </td>
    </tr>
  </tbody>
</table>


#### `Candidate`

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Required?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>name</code></td>
      <td>string</td>
      <td>Yes</td>
      <td>The registered name of the company.</td>
    </tr>
    <tr>
      <td><code>number</code></td>
      <td>string</td>
      <td>Yes</td>
      <td>The company&apos;s number or identifier in some registry.</td>
    </tr>
    <tr>
      <td><code>number_label</code></td>
      <td>string</td>
      <td>No</td>
      <td>Text to use as a label to explain the <code>number</code>, such
      	  as "Company number", "Charity number", "VAT number" etc.
      </td>
    </tr>
    <tr>
      <td><code>country_of_incorporation</code></td>
      <td>string</td>
      <td>Yes</td>
      <td>
        The <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3">ISO3 country code</a>
        for the country where the company is incorporated.
      </td>
    </tr>
    <tr>
      <td><code>status</code></td>
      <td>string</td>
      <td>No</td>
      <td>
        A string describing the current functioning of the company (e.g. "Active" or "Dissolved")
      </td>
    </tr>
    <tr>
      <td><code>provider_reference</code></td>
      <td>
        A ProviderRef object
      </td>
      <td>No</td>
      <td>
        An object uniquely identifying this candidate from this provider,
        structured as it is in <a href="#data-structure">the Passfort Partner API</a>
      </td>
    </tr>
    <tr>
      <td><code>addresses</code></td>
      <td>
        A list of CompanyAddress objects
      </td>
      <td>No</td>
      <td>
        Addresses of the company, with each CompanyAddress object structured
        as it is in <a href="#data-structure">the Passfort Partner API</a>.
      </td>
    </tr>
    <tr>
      <td><code>contact</code></td>
      <td>
        A CompanyContactDetails object
      </td>
      <td>No</td>
      <td>
        Contact details for the company, in an object structured as it
        is in <a href="#data-structure">the Passfort Partner API</a>.
      </td>
    </tr>
    <tr>
      <td><code>incorporation_date</code></td>
      <td>
        string
      </td>
      <td>No</td>
      <td>
        Exact date in YYYY-MM-DD format
      </td>
    </tr>
    <tr>
      <td><code>structure_type</code></td>
      <td>
        A StructuredCompanyType object
      </td>
      <td>No</td>
      <td>
        An object describing the company type: its members&apos; liability, its
        ownership structure, and whether it is traded publicly. The object is
        structured as it is in <a href="#data-structure">the Passfort Partner API</a>.
      </td>
    </tr>
    <tr>
      <td><code>lei</code></td>
      <td>string</td>
      <td>No</td>
      <td>Global Legal Entity Identifier</td>
    </tr>
    <tr>
      <td><code>tax_ids</code></td>
      <td>List of TaxId objects</td>
      <td>No</td>
      <td>
        Tax identifiers, with each TaxId object structured as in <a
        href="#data-structure">the Passfort Partner API</a>.
      </td>
    </tr>
    <tr>
      <td><code>bvd_id</code></td>
      <td>string</td>
      <td>No</td>
      <td>Moody&apos;s unique company identifier</td>
    </tr>
</tbody>
</table>

## Provider Field Checks

The identifier for this feature is <code>PROVIDER_FIELD_CHECKS</code>. This feature is compatible
with the <a href="#one-time-sync-company-data">One-time Sync Company Data</a> check type.

This feature allows an integration to return an array of <code>CompanyFieldCheck</code> objects.
The `CompanyFieldCheck` object describes whether a particular field (i.e. company name or number)
has been matched or mismatched according to the integration’s custom logic. Provider field checks
should be surfaced using the <code>field_checks</code> attribute of the <code>check_output</code>.

#### `CompanyFieldCheck`

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Required?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>field</code></td>
      <td>string</td>
      <td>Yes</td>
      <td>The field that the result refers to. One of 
      <code>["NAME", "NUMBER", "COUNTRY_OF_INCORPORATION", "IS_ACTIVE", "LEI", "ADDRESS"]</code></td>
    <tr>
    <tr>
      <td><code>result</code></td>
      <td>string</td>
      <td>Yes</td>
      <td>The result of the comparison. One of <code>["MATCH", "MISMATCH"]</code></td>
    <tr>
  </tbody>
</table>

## Embedding or linking an external webpage

Integrations have the option to include a URL within the check result. This URL can then either be displayed as a link or used to embed the resulting webpage within Passfort.

The identifier for this feature is either <code>EXTERNAL_LINK</code> or <code>EXTERNAL_EMBED</code> depending on how you intend to surface the external resource. This feature is compatible with all of our supported check types.

The `external_resources` object includes: whether the external resource is displayed as a link or an embed, the url, id, and a label describing the resource. 


>This endpoint returns JSON in the following format:

```json
<%=pretty_json("responses/run_check_sync_company_custom", "json") %>
```

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Required?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>type</code></td>
      <td>"EMBED"</a></td>
      <td>No</td>
      <td>The type of external resource that's being reported.</td>
    </tr>
    <tr>
      <td><code>url</code></td>
      <td>string</code></td>
      <td>No</td>
      <td>Provides additional detail for certain types of error.</td>
    </tr>
    <tr>
      <td><code>id</code></td>
      <td>string</td>
      <td>Yes</td>
      <td>
        The <code>external_resource</code> identifier.
      </td>
    </tr>
    <tr>
      <td><code>label</code></td>
      <td>string</td>
      <td>No</td>
      <td>
        Integration-specific structured error information that customers can
        use to get additional information about the error.
      </td>
    </tr>
  </tbody>
</table>

### Authentication

Passfort makes a request to your application via a signed url, which contains arguments as query parameters:

<code>https://your-url.com/<your-id>?version=<version>&valid_until=<valid_until>&auditee_id=<auditee_id>&signature=<signature></code>

The list of query parameter arguments is shown below, and is delivered in this order:

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Required?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>custom_data</code></td>
      <td>string</td>
      <td>No</td>
      <td>Any other parameters the integration wishes to have provided.</td>
    </tr>
    <tr>
      <td><code>version</code></td>
      <td>string</td>
      <td>Yes</td>
      <td>Versioning information for the signed URL.</td>
    </tr>
    <tr>
      <td><code>valid_until</code></td>
      <td>string</td>
      <td>Yes</td>
      <td>The epoch time the URL is considered valid until. Requests after this time will be deemed unauthentic by your integration.</td>
    </tr>
    <tr>
      <td><code>auditee_id</code></td>
      <td>string</td>
      <td>Yes</td>
      <td>UUID identifying the user or API key viewing the check.</td>
    </tr>
    <tr>
      <td><code>signature</code></td>
      <td>string</td>
      <td>Yes</td>
      <td>A base64url encoding of the SHA-256 HMAC of the entire URL, excluding the signature parameter.</td>
    </tr>
  </tbody>
</table>


The signature contains a HMAC of the entire URL excluding &signature=<signature>, and can be verified using a shared secret between Passfort and your backend systems.

The entire base URL (https://you-url.com/<your-id>) is returned by your integration as part of the result. It’s worth noting this URL should be considered permanent, meaning the content it serves should not change over time.


