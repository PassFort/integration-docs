# One-time Sync Company Data

This section lists all endpoints that must be implemented for a one-time synchronous company data check integration.

One-time synchronous company data checks are company data checks with the following behaviour:

    * The check result will be returned directly upon request; the response will not be sent until the check is finished (synchronous)
    
    * The check operates at a point-in-time: there is no ongoing monitoring of the check result (one-time)


## Get Check Configuration (One-time Sync Company Data)

<%= partial("includes/partials/config.md.erb", :locals => { :name => "sync_company_data" }) %>

This endpoint specifies the configuration used by PassFort for performing
one-time synchronous company data checks using your integration.

### HTTP Request

`GET https://my-integration.example.com/config`

### Response fields

Most configuration fields are already discussed in the [configuration
section](#configuration). Check specific options will be discussed here.

#### Check type

The `check_type` field must be set to `"COMPANY_DATA"`.

#### Check template

The `check_template` fields for this check are:

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Always Present?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>type</code></td>
      <td>The value <code>"ONE_TIME_SYNCHRONOUS"</code></td>
      <td>Yes</td>
      <td>
        Which check template to use for this check. For one-time synchronous
        checks, you must specify <code>"ONE_TIME_SYNCHRONOUS"</code>.
      </td>
    </tr>
    <tr>
      <td><code>timeout</code></td>
      <td>number</td>
      <td>No</td>
      <td>
        The number of seconds PassFort should wait without a response before
        considering identity checks run through this integration to have
        timed out. Must be an integer. If not specified or set to
        <code>null</code>, a timeout of 60 seconds will be used.
      </td>
    </tr>
  </tbody>
</table>

<%= partial("includes/partials/authenticated.md.erb", :locals => {
  :role => :server,
}) %>

## Run One-Time Sync Company Data Check

This endpoint exposes your data provider's company data check to PassFort.

### HTTP Request

`POST https://my-integration.example.com/checks`

>A JSON payload following this structure will be sent to the endpoint:

```json
<%= pretty_json("requests/run_check_sync_company_data", "json") %>
```

The payload of the request can contain the following fields:

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Always present?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>id</code></td>
      <td>UUID</td>
      <td>Yes</td>
      <td>
        Every check instruction will contain a unique ID which can be used to
        track and identify individual requests without needing to use other
        information in the request.
      </td>
    </tr>
    <tr>
      <td><code>demo_result</code></td>
      <td>
        One of the <a href="#demo-result-types">specified demo result types</a>
      </td>
      <td>No</td>
      <td>
        If this field is present, the check must be considered a demo check
        and you should respond with appropriate demo data. See the
        <a href="#demo-checks">Demo Checks section</a> for more information.
      </td>
    </tr>
    <tr>
      <td><code>commercial_relationship</code></td>
      <td>One of <code>"DIRECT"</code>, <code>"PASSFORT"</code></td>
      <td>Yes</td>
      <td>
        Specified whether the check is for a customer with a direct
        relationship with your integration's data provider, or if they are
        using the check through PassFort's pay-as-you-go reselling scheme.
      </td>
    </tr>
    <tr>
      <td><code>check_input</code></td>
      <td>A CompanyData object</td>
      <td>Yes</td>
      <td>
        This field contains the profile information on the company the
        company data check should be run for. See the
        <a href="#check-input">PassFort Data Structure check input section</a>
        for more information on how profile data is structured within PassFort.
      </td>
    </tr>
    <tr>
      <td><code>provider_config</code></td>
      <td>A user-defined JSON object</td>
      <td>Yes</td>
      <td>
        This field contains the provider config structured in the way
        specified by your integration's
        <a href="#get-check-configuration-one-time-sync-company-data">
          configuration endpoint
        </a>, with the <code>name</code> field corresponding to the key, and
        the value being the value of the configuration option.
      </td>
    </tr>
    <tr>
      <td><code>provider_credentials</code></td>
      <td>A user-defined JSON object</td>
      <td>No</td>
      <td>
        This field contains the credentials structured in the way
        specified by your integration's
        <a href="#get-check-configuration-one-time-sync-company-data">
          configuration endpoint
        </a>, with the <code>name</code> field corresponding to the key, and
        the value being the value of the configuration option. <strong>This
        field is only sent if <code>commercial_relationship</code> is set to
        <code>"DIRECT"</code>.</strong>
      </td>
    </tr>
  </tbody>
</table>

```python 
from flask import Flask, jsonify, request
from integration.testing import create_demo_result
from integration.provider import make_provider_request, reseller_creds, \
    extract_passfort_metadata
from integration.errors import ProviderError, ConnectionError

app = Flask(__name__)

@app.post('/checks')
def run_check():
    body = request.json

    demo_result = body.get('demo_result')
    check_input = body.get('check_input')

    # Handle demo data scenarios
    if demo_result is not None:
        return jsonify(create_demo_result(demo_result, check_input))

    commercial_rel = body.get('commercial_relationship')
    credentials = reseller_creds
    config = body.get('provider_config')

    # Use provided creds if check is through direct agreement
    if commercial_rel == 'DIRECT':
      credentials = body.get('provider_credentials')

    # Make call to provider
    try:
        result = make_provider_request(credentials, config, check_input)

        return jsonify({
            'check_output': {
                'enitity_type': 'COMPANY', 
                'metadata': extract_passfort_metadata(result),
            },
            'errors': [],
            'warnings': [],
            'provider_data': dict(result)
        })
    except ConnectionError as e:
        return jsonify({
            'errors': [{
                'type': 'PROVIDER_CONNECTION',
                'message': f'Failed to contact data provider: {str(e)}'
            }],
            'warnings': []
        })
    except ProviderError as e:
        return jsonify({
            'errors': [{
                'type': 'PROVIDER_MESSAGE',
                'message': f'Provider error: {str(e)}'
            }],
            'warnings': []
        })
```

```javascript
const express = require("express");
const app = express();

const { createDemoResult } = require("./testing");
const {
  makeProviderRequest,
  RESELLER_CREDS,
  extractPassFortMetadata,
} = require("./provider");

app.use(express.json());

app.post("/checks", (req, res) => {
  // Handle demo data scenarios
  if (req.body.demo_result !== undefined) {
    return res.json(
      createDemoResult(req.body.demo_result, req.body.check_input)
    );
  }

  // Use provided creds if check is through direct agreement
  const credentials =
    req.body.commercial_relationship === "DIRECT"
      ? res.body.provider_credentials
      : RESELLER_CREDS;

  return makeProviderRequest(
    credentials,
    req.body.provider_config,
    req.body.check_input
  )
    .then((checkResult) => {
      return res.json({
        check_output: {
          entity_type: "COMPANY",
          metadata: extractPassFortMetadata(checkResult)
        },
        errors: [],
        warnings: [],
        provider_data: checkResult.data(),
      });
    })
    .catch((err) => {
      if (err.type === "CONNECTION") {
        return res.json({
          errors: [
            {
              type: "PROVIDER_CONNECTION",
              error: "Failed to contact data provider: " + e.message,
            },
          ],
          warnings: [],
        });
      } else {
        return res.json({
          errors: [
            {
              type: "PROVIDER_MESSAGE",
              error: "Provider error: " + e.message,
            },
          ],
          warnings: [],
        });
      }
    });
});
```

>This endpoint should return JSON in the following format:

```json
<%=pretty_json("responses/run_check_sync_company_data", "json") %>
```

### Response fields

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Required?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>check_output</code></td>
      <td>Object structured per <code>check_output</code> below</td>
      <td>If check did not error</td>
      <td>
        Indicates the result data for this check. See the
        <code>check_output</code> section for the full structure of
        this check.
      </td>
    </tr>
    <tr>
      <td><code>errors</code></td>
      <td>
        An array containing one or more
        <a href="#check-errors">Errors</a>
      </td>
      <td>No</td>
      <td>
        A list of errors that occurred while running this check. If this is
        provided and it's not empty, the result of this check will be
        considered to be errored by PassFort, regardless of the other contents
        of this response.
      </td>
    </tr>
    <tr>
      <td><code>warnings</code></td>
      <td>
        An array containing one or more warnings
      </td>
      <td>No</td>
      <td>
        Essentially the same as <code>errors</code>, except the
        <code>sub_type</code> and <code>data</code> fields are not present, and
        providing warnings will not cause PassFort to consider the check
        as errored.
      </td>
    </tr>
    <tr>
      <td><code>provider_data</code></td>
      <td>
        Any valid JSON value
      </td>
      <td>No</td>
      <td>
        This should be the structured JSON data returned by the data provider,
        or a conversion of the data provider's response, to allow
        PassFort to investigate issues that may arise with your integration.
      </td>
    </tr>
    <tr>
      <td><code>charges</code></td>
      <td>
        An array containing one or more
        <a href="#check-charges">Charges</a>
      </td>
      <td>No</td>
      <td>
        A list of charges incurred while running this check. Charges may only
        be returned if both of these conditions are met:
        <ul>
          <li>No errors occurred (i.e. a result was generated).</li>
          <li>
            The check is being resold (the commercial relationship is
            with PassFort).
          </li>
        </ul>
        
        For demo checks, charges may be returned, but they will not be deducted
        from the institution's credit.
        
        If charges are returned, the total amount charged must be no greater
        than the maximum cost-per-check specified in the integration's
        configuration.
      </td>
    </tr>
  </tbody>
</table>


#### `check_output`

<table>
  <thead>
    <th>Field</th>
    <th>Type</th>
    <th>Required?</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <td><code>entity_type</code></td>
      <td>The value <code>"COMPANY"</code></td>
      <td>Yes</td>
      <td>
        The only supported entity type for Company Data Checks
        is company.
      </td>
    </tr>
    <tr>
      <td><code>metadata</code></td>
      <td>
        An object containing the registry data, structured as it is
        in <a href="#data-structure">the PassFort API</a>.
      </td>
      <td>If a match was found by the provider</td>
      <td>A best effort should be made to populate all fields supported by the provider</td>
    </tr>
  </tbody>
</table>

